from flask import Flask, request, jsonify
import firebase_admin
from firebase_admin import credentials, db
import os
import json

app = Flask(__name__)

# üîπ Configura√ß√£o do Firebase (usando vari√°vel de ambiente do Render)
firebase_key_json = os.environ.get("FIREBASE_KEY")

if firebase_key_json:
    cred_dict = json.loads(firebase_key_json)  # Converte JSON para dicion√°rio
    cred = credentials.Certificate(cred_dict)
    firebase_admin.initialize_app(cred, {
        "databaseURL": "https://adsdados-default-rtdb.firebaseio.com/"
    })
else:
    print("‚ùå ERRO: Vari√°vel FIREBASE_KEY n√£o encontrada.")
    exit(1)

# üîπ Fun√ß√£o para carregar os an√∫ncios do Firebase
def load_ads():
    ref = db.reference("ads")
    ads = ref.get()
    return list(ads.values()) if ads else []  # Retorna lista vazia se n√£o houver an√∫ncios

# üîπ Rota para testar se a API est√° rodando
@app.route("/", methods=["GET"])
def home():
    return jsonify({"message": "API est√° rodando!"}), 200

# üîπ Rota para buscar todos os an√∫ncios
@app.route("/ads", methods=["GET"])
def get_ads():
    ads = load_ads()
    return jsonify(ads), 200

# üîπ Rota para adicionar um novo an√∫ncio (verifica c√≥digo antes)/////////////////////////////////////////////////
@app.route("/validate_code", methods=["POST"])
def validate_code():
    data = request.get_json()
    user_code = data.get("code")

    if not user_code:
        return jsonify({"error": "C√≥digo n√£o fornecido"}), 400

    # Refer√™ncia ao banco de dados
    codes_ref = db.reference("codes")
    codes_data = codes_ref.get()

    if not codes_data:
        return jsonify({"error": "Nenhum c√≥digo encontrado"}), 404

    # Verifica se o c√≥digo existe dentro de algum dos registros
    for key, value in codes_data.items():
        if value.get("code") == user_code and value.get("valid", False):
            # C√≥digo encontrado, marcamos como inv√°lido (j√° utilizado)
            codes_ref.child(key).update({"valid": False})
            return jsonify({"message": "C√≥digo v√°lido!", "status": "success"}), 200

    return jsonify({"error": "C√≥digo inv√°lido ou j√° utilizado"}), 400


# üîπ Rota para adicionar c√≥digos de pagamento ao Firebase//////////////////////////////////////////////////////////////////
@app.route("/add_codes", methods=["POST"])
def add_codes():
    try:
        data = request.get_json()
        codes = data.get("codes", [])

        if not codes:
            return jsonify({"error": "Nenhum c√≥digo fornecido"}), 400

        codes_ref = db.reference("codes")

        for code in codes:
            codes_ref.child(code).set(True)  # Salva o c√≥digo no Firebase

        return jsonify({"message": "‚úÖ C√≥digos adicionados com sucesso!", "codes": codes}), 201

    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000, debug=True)
